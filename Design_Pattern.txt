Stategy Design Pattern
  Class should have "has-a" replation with functionality that is which is commons in some of it's child to reduce code redundancy.
  ex. class "has-a" interface which can ne extended to implement different functionality. Vechical engine type
  
Observer Design Pattern
  Example: Design "Notify me" functionality
  Observable [(0,*) relationship with] Observer
  
  Observable Interface
    - add(Observer)
    - remove(Observer)
    - modify(Observers)
    - notify()
    
  Observer Interface
    - update()
    
  
 Decorator Design Pattern (Structrural Design Pattern)
  Example: Design Pizza Makker machine, Design Coffe Machine
    abstract class base{}
    abstract class Extra extends Base{}

Adaptor Design Patter
  Example: XML to JSON data adaptor
  Adaptor have 'has-a' relationship with existing interface.
  
Builder Design Pttern (Creation Design Pattern)

Facade Design Pattern
  Used whenever we want to hide system complexity/bussiness logic from the client.
  Example:  OrderFacade::createOrder -> {Product::getProduct, Payment::makePayment, Invoice::generateInvoice, Notification::sentSMS}
  
Null Object Design Pattern
  Handle NPE and reuce duplicacy of null check. ex: ogj != null
  With adding Factory Pattern return NULLObject if no criateria mate instead of null.
  NULLObject can nothing or Default behaviour when its triggered.
